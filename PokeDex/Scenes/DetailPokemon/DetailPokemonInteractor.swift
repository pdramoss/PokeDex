//
//  DetailPokemonInteractor.swift
//  PokeDex
//
//  Created by Pedro Ramos on 23/10/19.
//  Copyright (c) 2019 Pedro Ramos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailPokemonBusinessLogic {
    func doLoadInitialData(request: DetailPokemonScene.Load.Request)
    func doLoadImageData(request: DetailPokemonScene.LoadImage.Request)
}

protocol DetailPokemonDataStore {
    
}

class DetailPokemonInteractor: DetailPokemonBusinessLogic, DetailPokemonDataStore {
    var presenter: DetailPokemonPresentationLogic?
    var worker: DetailPokemonWorkerProtocol?
    
    func doLoadInitialData(request: DetailPokemonScene.Load.Request) {
        worker?.fetchPokemon(id: request.id, completion: { [weak self] (response) in
            switch response {
            case .success(let pokemon):
                self?.presenter?.presentPokemon(response: DetailPokemonScene.Load.Response(pokemon: pokemon))
            case .failure(let error):
                self?.presenter?.presentMessageError(error: error)
            }
        })
    }
    
    func doLoadImageData(request: DetailPokemonScene.LoadImage.Request) {
        worker?.fetchImage(id: request.id, completion: { [weak self] (response) in
            switch response {
            case .success(let image):
                self?.presenter?.presentImage(response: DetailPokemonScene.LoadImage.Response(image: image))
            case .failure(let error):
                self?.presenter?.presentMessageError(error: error)
            }
        })
    }
}
